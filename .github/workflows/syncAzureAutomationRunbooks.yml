name: Sync Azure Automation Runbooks

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  sync-runbooks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Important to fetch all history for proper diffs

    - name: Get changed files
      id: changed-files
      run: |
        # Different approach based on event type
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For pull requests, compare base and head commits
          echo "Getting changes from PR"
          DIFF_OUTPUT=$(git diff --name-status ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          # For pushes, compare previous and current commits
          echo "Getting changes from push"
          if [[ -n "${{ github.event.before }}" && "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
            DIFF_OUTPUT=$(git diff --name-status ${{ github.event.before }} ${{ github.sha }})
          else
            # First push to branch case - compare with the first parent commit
            echo "First push to branch, getting all files"
            DIFF_OUTPUT=$(git diff --name-status $(git rev-parse HEAD^) ${{ github.sha }})
          fi
        else
          # For workflow_dispatch or other events, list all files
          echo "Manual workflow run, getting all files"
          DIFF_OUTPUT=$(find . -type f -not -path "*/\.*" -not -path "*/node_modules/*" | sed 's/^\.\//A /')
        fi

        echo "Changes detected:"
        echo "$DIFF_OUTPUT"

        # Create separate files for added/modified and deleted files
        ADDED_MODIFIED_FILES=""
        DELETED_FILES=""

        # Process each line individually to handle all cases, including renames
        while IFS= read -r line; do
          if [[ -z "$line" ]]; then
            continue  # Skip empty lines
          fi

          status=${line:0:1}  # Get first character (status code)

          if [[ "$status" == "A" || "$status" == "M" ]]; then
            # Added or modified file
            file=$(echo "$line" | awk '{print $2}')
            ADDED_MODIFIED_FILES+="$file "
          elif [[ "$status" == "D" ]]; then
            # Deleted file
            file=$(echo "$line" | awk '{print $2}')
            DELETED_FILES+="$file "
          elif [[ "$status" == "R" ]]; then
            # Renamed file - treat as both deletion and addition
            old_file=$(echo "$line" | awk '{print $2}')
            new_file=$(echo "$line" | awk '{print $3}')
            DELETED_FILES+="$old_file "
            ADDED_MODIFIED_FILES+="$new_file "
          fi
        done <<< "$DIFF_OUTPUT"

        # Trim trailing spaces
        ADDED_MODIFIED_FILES=$(echo "$ADDED_MODIFIED_FILES" | xargs)
        DELETED_FILES=$(echo "$DELETED_FILES" | xargs)

        # Set environment variables
        echo "ADDED_MODIFIED_FILES=$ADDED_MODIFIED_FILES" >> $GITHUB_ENV
        echo "DELETED_FILES=$DELETED_FILES" >> $GITHUB_ENV

        echo "Processed changes:"
        echo "Added/Modified: $ADDED_MODIFIED_FILES"
        echo "Deleted: $DELETED_FILES"

    - name: Display changed files
      run: |
        echo "Added or Modified files:"
        echo "$ADDED_MODIFIED_FILES"
        echo "----------------------"
        echo "Deleted files:"
        echo "$DELETED_FILES"

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        enable-AzPSSession: true


    - name: Sync Azure Automation Runbooks
      shell: pwsh
      run: |
        $subscriptionId = "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        $resourceGroup = "${{ secrets.AZURE_RESOURCE_GROUP }}"
        $automationAccount = "${{ secrets.AZURE_AUTOMATION_ACCOUNT }}"
        $addedModifiedFiles = "${{ env.ADDED_MODIFIED_FILES }}"
        $deletedFiles = "${{ env.DELETED_FILES }}"

        # Install Azure PowerShell module if not already installed
        if (-not (Get-Module -ListAvailable -Name Az)) {
          Install-Module -Name Az -Scope CurrentUser -Force
        }

        # Import the Az module
        Import-Module Az

        # Connect to Azure (the azure/login action already handles authentication)
        Write-Host "Connected to Azure"

        # Function to upload or update a runbook
        function Upload-Runbook {
          param (
            [string]$filePath,
            [string]$resourceGroup,
            [string]$automationAccount
          )

          $runbookName = [System.IO.Path]::GetFileNameWithoutExtension($filePath)
          $runbookContent = Get-Content -Path $filePath -Raw

          # Check if the runbook already exists
          $existingRunbook = Get-AzAutomationRunbook -ResourceGroupName $resourceGroup -AutomationAccountName $automationAccount -Name $runbookName -ErrorAction SilentlyContinue

          if ($null -ne $existingRunbook) {
            Write-Host "Updating existing runbook: $runbookName"
            Set-AzAutomationRunbook -ResourceGroupName $resourceGroup -AutomationAccountName $automationAccount -Name $runbookName -Content $runbookContent -Type "PowerShell" -Force
          } else {
            Write-Host "Creating new runbook: $runbookName"
            New-AzAutomationRunbook -ResourceGroupName $resourceGroup -AutomationAccountName $automationAccount -Name $runbookName -Content $runbookContent -Type "PowerShell"
          }
        }

        # Function to delete a runbook
        function Delete-Runbook {
          param (
            [string]$filePath,
            [string]$resourceGroup,
            [string]$automationAccount
          )

          $runbookName = [System.IO.Path]::GetFileNameWithoutExtension($filePath)

          # Check if the runbook exists before attempting to delete
          $existingRunbook = Get-AzAutomationRunbook -ResourceGroupName $resourceGroup -AutomationAccountName $automationAccount -Name $runbookName -ErrorAction SilentlyContinue

          if ($null -ne $existingRunbook) {
            Write-Host "Deleting runbook: $runbookName"
            Remove-AzAutomationRunbook -ResourceGroupName $resourceGroup -AutomationAccountName $automationAccount -Name $runbookName -Force
          } else {
            Write-Host "Runbook $runbookName does not exist, skipping deletion."
          }
        }
        # Process added or modified files
        if (-not [string]::IsNullOrEmpty($addedModifiedFiles)) {
          $addedModifiedFilesArray = $addedModifiedFiles -split ' '
          foreach ($file in $addedModifiedFilesArray) {
            if (Test-Path -Path $file) {
              Write-Host "Processing added/modified file: $file"
              Upload-Runbook -filePath $file -resourceGroup $resourceGroup -automationAccount $automationAccount
            } else {
              Write-Host "File $file does not exist, skipping."
            }
          }
        } else {
          Write-Host "No added or modified files to process."
        }
        # Process deleted files
        if (-not [string]::IsNullOrEmpty($deletedFiles)) {
          $deletedFilesArray = $deletedFiles -split ' '
          foreach ($file in $deletedFilesArray) {
            Write-Host "Processing deleted file: $file"
            Delete-Runbook -filePath $file -resourceGroup $resourceGroup -automationAccount $automationAccount
          }
        } else {
          Write-Host "No deleted files to process."
        }

