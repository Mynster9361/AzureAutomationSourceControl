name: Release Drafter

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '.github/**'
      - '*.md'
      - 'LICENSE'
      - '.gitignore'

  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - main
      - master

  # Allow manual running to create/update a draft release any time
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish the draft release'
        required: false
        type: boolean
        default: false
      tag:
        description: 'Override release tag (leave empty for automatic)'
        required: false
        default: ''

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - uses: release-drafter/release-drafter@v6
        id: release_drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Optional: specify config name to use, relative to .github/
        with:
          config-name: release-drafter.yml
          tag: ${{ github.event.inputs.tag || '' }}
          name: ${{ github.event.inputs.tag != '' && format('v{0}', github.event.inputs.tag) || '' }}

      # If manually triggered and publish is true, publish the draft release
      - name: Publish Release
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.release_drafter.outputs.id }}
            });

            if (release.draft) {
              console.log(`Publishing draft release ${release.name}...`);
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ steps.release_drafter.outputs.id }},
                draft: false,
                tag_name: '${{ github.event.inputs.tag || steps.release_drafter.outputs.tag_name }}'
              });
              console.log(`Release published at ${release.html_url}`);
            } else {
              console.log(`Release ${release.name} is already published`);
            }

      - name: Display Release URL
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "::notice ::Release updated at ${{ steps.release_drafter.outputs.html_url }}"
          TAG="${{ github.event.inputs.tag || steps.release_drafter.outputs.tag_name }}"
          echo "Release ${{ steps.release_drafter.outputs.name }} ready with tag: $TAG"
          if [[ "${{ github.event.inputs.publish }}" == "true" ]]; then
            echo "Release has been published!"
          else
            echo "Release is still in draft mode. Run workflow again with 'publish' option to publish."
          fi